{
    "version": 3,
    "file": "workbox-sw.js",
    "sources": [
    "../_version.mjs",
    "../controllers/WorkboxSW.mjs",
    "../index.mjs"
    ],
    "sourcesContent": [
    "try{self['workbox:sw:4.3.1']&&_()}catch(e){}// eslint-disable-line",
    "/* Copyright 2018 Google LLC Use of this source code is governed by an MIT-style license that can be found in the LICENSE file or at https://opensource.org/licenses/MIT. */ import '../_version.mjs'; const CDN_PATH = `WORKBOX_CDN_ROOT_URL`; const MODULE_KEY_TO_NAME_MAPPING = { // TODO(philipwalton): add jsdoc tags to associate these with their module. // @name backgroundSync // @memberof workbox // @see module:workbox-background-sync backgroundSync: 'background-sync', broadcastUpdate: 'broadcast-update', cacheableResponse: 'cacheable-response', core: 'core', expiration: 'expiration', googleAnalytics: 'offline-ga', navigationPreload: 'navigation-preload', precaching: 'precaching', rangeRequests: 'range-requests', routing: 'routing', strategies: 'strategies', streams: 'streams', }; /** * This class can be used to make it easy to use the various parts of * Workbox. * * @private */ export class WorkboxSW { /** * Creates a proxy that automatically loads workbox namespaces on demand. * * @private */ constructor() { this.v = {}; this._options = { debug: self.location.hostname === 'localhost', modulePathPrefix: null, modulePathCb: null, }; this._env = this._options.debug ? 'dev' : 'prod'; this._modulesLoaded = false; return new Proxy(this, { get(target, key) { if (target[key]) { return target[key]; } const moduleName = MODULE_KEY_TO_NAME_MAPPING[key]; if (moduleName) { target.loadModule(`workbox-${moduleName}`); } return target[key]; }, }); } /** * Updates the configuration options. You can specify whether to treat as a * debug build and whether to use a CDN or a specific path when importing * other workbox-modules * * @param {Object} [options] * @param {boolean} [options.debug] If true, `dev` builds are using, otherwise * `prod` builds are used. By default, `prod` is used unless on localhost. * @param {Function} [options.modulePathPrefix] To avoid using the CDN with * `workbox-sw` set the path prefix of where modules should be loaded from. * For example `modulePathPrefix: '/third_party/workbox/v3.0.0/'`. * @param {workbox~ModulePathCallback} [options.modulePathCb] If defined, * this callback will be responsible for determining the path of each * workbox module. * * @alias workbox.setConfig */ setConfig(options = {}) { if (!this._modulesLoaded) { Object.assign(this._options, options); this._env = this._options.debug ? 'dev' : 'prod'; } else { throw new Error('Config must be set before accessing workbox.* modules'); } } /** * Load a Workbox module by passing in the appropriate module name. * * This is not generally needed unless you know there are modules that are * dynamically used and you want to safe guard use of the module while the * user may be offline. * * @param {string} moduleName * * @alias workbox.loadModule */ loadModule(moduleName) { const modulePath = this._getImportPath(moduleName); try { importScripts(modulePath); this._modulesLoaded = true; } catch (err) { // TODO Add context of this error if using the CDN vs the local file. // We can't rely on workbox-core being loaded so using console // eslint-disable-next-line console.error( `Unable to import module '${moduleName}' from '${modulePath}'.`); throw err; } } /** * This method will get the path / CDN URL to be used for importScript calls. * * @param {string} moduleName * @return {string} URL to the desired module. * * @private */ _getImportPath(moduleName) { if (this._options.modulePathCb) { return this._options.modulePathCb(moduleName, this._options.debug); } // TODO: This needs to be dynamic some how. let pathParts = [CDN_PATH]; const fileName = `${moduleName}.${this._env}.js`; const pathPrefix = this._options.modulePathPrefix; if (pathPrefix) { // Split to avoid issues with developers ending / not ending with slash pathParts = pathPrefix.split('/'); // We don't need a slash at the end as we will be adding // a filename regardless if (pathParts[pathParts.length - 1] === '') { pathParts.splice(pathParts.length - 1, 1); } } pathParts.push(fileName); return pathParts.join('/'); } } ",
    "/* Copyright 2018 Google LLC Use of this source code is governed by an MIT-style license that can be found in the LICENSE file or at https://opensource.org/licenses/MIT. */ import {WorkboxSW} from './controllers/WorkboxSW.mjs'; import './_version.mjs'; /** * @namespace workbox */ // Don't export anything, just expose a global. self.workbox = new WorkboxSW(); "
    ],
    "names": [
    "self",
    "_",
    "e",
    "CDN_PATH",
    "MODULE_KEY_TO_NAME_MAPPING",
    "backgroundSync",
    "broadcastUpdate",
    "cacheableResponse",
    "core",
    "expiration",
    "googleAnalytics",
    "navigationPreload",
    "precaching",
    "rangeRequests",
    "routing",
    "strategies",
    "streams",
    "workbox",
    "constructor",
    "v",
    "_options",
    "debug",
    "location",
    "hostname",
    "modulePathPrefix",
    "modulePathCb",
    "_env",
    "this",
    "_modulesLoaded",
    "Proxy",
    "get",
    "target",
    "key",
    "moduleName",
    "loadModule",
    "setConfig",
    "options",
    "Error",
    "Object",
    "assign",
    "modulePath",
    "_getImportPath",
    "importScripts",
    "err",
    "console",
    "error",
    "pathParts",
    "fileName",
    "pathPrefix",
    "split",
    "length",
    "splice",
    "push",
    "join"
    ],
    "mappings": "yBAAA,IAAIA,KAAK,qBAAqBC,IAAI,MAAMC,ICUxC,MAAMC,EAAY,4DAEZC,EAA6B,CAKjCC,eAAgB,kBAChBC,gBAAiB,mBACjBC,kBAAmB,qBACnBC,KAAM,OACNC,WAAY,aACZC,gBAAiB,aACjBC,kBAAmB,qBACnBC,WAAY,aACZC,cAAe,iBACfC,QAAS,UACTC,WAAY,aACZC,QAAS,WCZXhB,KAAKiB,QAAU,IDqBR,MAMLC,0BACOC,EAAI,QACJC,EAAW,CACdC,MAAkC,cAA3BrB,KAAKsB,SAASC,SACrBC,iBAAkB,KAClBC,aAAc,WAGXC,EAAOC,KAAKP,EAASC,MAAQ,MAAQ,YACrCO,GAAiB,EAEf,IAAIC,MAAMF,KAAM,CACrBG,IAAIC,EAAQC,MACND,EAAOC,UACFD,EAAOC,SAGVC,EAAa7B,EAA2B4B,UAC1CC,GACFF,EAAOG,sBAAsBD,KAGxBF,EAAOC,MAsBpBG,UAAUC,EAAU,OACbT,KAAKC,QAIF,IAAIS,MAAM,yDAHhBC,OAAOC,OAAOZ,KAAKP,EAAUgB,QACxBV,EAAOC,KAAKP,EAASC,MAAQ,MAAQ,OAiB9Ca,WAAWD,SACHO,EAAab,KAAKc,EAAeR,OAErCS,cAAcF,QACTZ,GAAiB,EACtB,MAAOe,SAKPC,QAAQC,kCACwBZ,YAAqBO,OAC/CG,GAYVF,EAAeR,MACTN,KAAKP,EAASK,oBACTE,KAAKP,EAASK,aAAaQ,EAAYN,KAAKP,EAASC,WAI1DyB,EAAY,CAAC3C,SAEX4C,KAAcd,KAAcN,KAAKD,OAEjCsB,EAAarB,KAAKP,EAASI,wBAC7BwB,GAMsC,MAJxCF,EAAYE,EAAWC,MAAM,MAIfH,EAAUI,OAAS,IAC/BJ,EAAUK,OAAOL,EAAUI,OAAS,EAAG,GAI3CJ,EAAUM,KAAKL,GAERD,EAAUO,KAAK"
    }